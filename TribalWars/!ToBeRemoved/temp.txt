vanuit MapControl:
        // ok.
        /*

        Map: De groene box met aantal voorgeprogrammeerde dingen
         * MapLocation
         * MapFilter
         * MapMarkers (=IMapDrawer?)
         * XY rulers
         * up, down, left, right arrows
         * verwacht IMapManipulators
         * Uitvoeren van de standard display op memory image -> met af en toe een invalidate? 
         * Uitvoeren van de specials drawen op een seperate thread
         * Nakijken wat ik doe met de HandlePaintinginHw & double buffering etc
          
        MapFilter
         * Standaard tw limits nemen
         
        Standard Map implementatie:
         * Van de knoppen nakijken of ze niet naar een apart scherm moeten gaan
         * enkel bij de main map op aparte threads werken
        
        IMapManipulator
         * Maak lijst van manipulators: zodat notes, aanval vlagskes op de map ook kunnen gehittest worden
         * Maak ze opgloeien als er met de muis overgegaan wordt
         * beheert alle behaviour VillageSelected etc
         * Heeft nodig VillageHover()
         * Heeft verschillende opties (icons op de toolstrip) met extra opties
               * Attack village
               * Attack from
               * Zal vooral praktisch zijn bij "editeer map" waar ge dan kunt kiezen tussen rechthoeken, text, ...
         * Links boven icoon is de map-changer dropdown + tooltip met huidige locatie + zoom
         
         * Ik moet maar één DefaultManipulator hebben
         * En daar dan verschillende IMapDrawers en IMapManipulators aan toe kennen
         * Of soms eens overerven van DefaultManipulator als het behaviour veel verschilt
         * 
 
        IMapDrawer
         * Zorgt voor de opkuis en caching van de pens & brushes
         * De marker rechtstreeks op de villages zetten
         * De pens goedzetten, 
         
         Villages:
         * Krijgen een SpecialMarker toegewezen door de MapMarkers
         * Geen SpecialMarker: MapFilter beslist
         
         
         */
          
        // this thing should do as little as possible
        // it keeps a reference to a MapController
        // which keeps all info together

        // the MapController is held by the World
        // so we can issue commands to the mapcontrol from the world

        // by changing the MapController we have different behaviour
        //public WorldMap MapController;


        // store all the pens, brushes here
        // probably better to store them on WorldMap class